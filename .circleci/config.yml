version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4
  python: circleci/python@2.1.1
  node: circleci/node@5.1.0

commands:
  exports:
    steps:
      - run:
          name: "Get git commit short-hash for the current and the previous commit"
          command: |
            # Git hash for the current commit
            echo 'export current_commit=<< pipeline.git.revision >>' >> "$BASH_ENV"
            echo 'export CUR_SHORT_HASH="${current_commit:0:7}"' >> "$BASH_ENV"
            # Git hash for the previous commit
            echo 'export previous_commit=<< pipeline.git.base_revision >>' >> "$BASH_ENV"
            echo 'export PRE_SHORT_HASH="${previous_commit:0:7}"' >> "$BASH_ENV"
      - run:
          name: "Export environment variable"
          command: |
            echo 'export PROJECT_DIR="/home/circleci/project"' >> "$BASH_ENV"
            echo 'export WORKSPACE_DIR="/home/circleci/workspace"' >> "$BASH_ENV"
            echo 'export PROJECT_ROOT_DIR="/home/circleci/project/build-cicd-pipeline/final-project"' >> "$BASH_ENV"
            echo 'export TEMPLATE_ROOT_DIR="/home/circleci/project/build-cicd-pipeline/create-infrastructure"' >> "$BASH_ENV"
            echo 'export PROJECT_TAG="ThaiDG-Udacity-final-project"' >> "$BASH_ENV"

  delete_stack:
    parameters:
      stack_name:
        type: string
      when:
        default: "on_success"
        type: enum
        enum: ["always", "on_success", "on_fail"]
    steps:
      - run:
          name: "Delete << parameters.stack_name >> stack"
          shell: /bin/bash
          when: << parameters.when >>
          command: |
            # Get stack id for the delete_stack waiter
            stack_info=$(aws cloudformation describe-stacks --stack-name << parameters.stack_name >> --query "Stacks[*] | [0].StackId" 2>&1)
            if echo $stack_info | grep 'does not exist'
            then
              echo "Stack does not exist."
              echo $stack_info
              exit 0
            fi
            if echo $stack_info | grep 'ValidationError'
            then
              echo $stack_info
              exit 1
            else
              aws cloudformation delete-stack --stack-name << parameters.stack_name >>
              echo $stack_info
              aws cloudformation wait stack-delete-complete --stack-name $stack_info
              if [ "<< parameters.when >>" = "on_fail" ]
              then
                echo "Roll back completed. Green environment destroyed."
                exit 1
              fi
              echo "Stack deleted."
              exit 0
            fi
  
  deploy_stack:
    parameters:
      stack_name:
        type: string
      template_file:
        type: string
      parameter_overrides:
        type: string
    steps:
      - run:
          name: "Deploy << parameters.stack_name >> stack"
          command: |
            aws cloudformation deploy \
            --stack-name << parameters.stack_name >> \
            --template-file << parameters.template_file >> \
            --parameter-overrides << parameters.parameter_overrides >> \
            --no-fail-on-empty-changeset \
            --region us-east-1 \
            --tags Project="ThaiDG-Udacity-final-project" \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

jobs:
  scan-frontend:
    executor:
      name: node/default
      tag: "13.8.0"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - node/install-packages:
          app-dir: /home/circleci/project/build-cicd-pipeline/final-project/frontend
          cache-path: /home/circleci/project/build-cicd-pipeline/final-project/frontend
          cache-version: v2
      # Your job code here
      - run:
          name: "Scan frontend"
          command: |
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
          working_directory: /home/circleci/project/build-cicd-pipeline/final-project/frontend

  scan-backend:
    executor:
      name: node/default
      tag: "13.8.0"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - node/install-packages:
          app-dir: /home/circleci/project/build-cicd-pipeline/final-project/backend
          cache-path: /home/circleci/project/build-cicd-pipeline/final-project/backend
          cache-version: v2
      # Your job code here
      - run:
          name: "Scan backend"
          command: |
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --force
            npm audit --audit-level=critical
          working_directory: /home/circleci/project/build-cicd-pipeline/final-project/backend

  create-network-infrastructure:
    executor: aws-cli/default
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Set up AWS Credentials
      - aws-cli/setup
      # All infrastructure does not cost money so don't need to remove when fail
      # Create networking
      - deploy_stack:
          stack_name: 'NetWorking-Final-Project'
          template_file: $TEMPLATE_ROOT_DIR/networking.yml
          parameter_overrides: file://$TEMPLATE_ROOT_DIR/networking-parameters.json
      # Create security
      - deploy_stack:
          stack_name: 'Security-Final-Project'
          template_file: $TEMPLATE_ROOT_DIR/security.yml
          parameter_overrides: file://$TEMPLATE_ROOT_DIR/security-parameters.json
      # Create launch template
      - deploy_stack:
          stack_name: 'Launch-Template-Final-Project'
          template_file: $TEMPLATE_ROOT_DIR/launch-template.yml
          parameter_overrides: file://$TEMPLATE_ROOT_DIR/launch-template-parameters.json

  create-backend-infrastructure:
    executor: aws-cli/default
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Set up AWS Credentials
      - aws-cli/setup
      # Create backend infrastructure
      - deploy_stack:
          stack_name: Udapeople-Backend-${CUR_SHORT_HASH}
          template_file: $TEMPLATE_ROOT_DIR/ec2-instances.yml
          parameter_overrides: file://$TEMPLATE_ROOT_DIR/ec2-instances-parameters.json
      - run:
          name: "Get backend server Public IP Address"
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=$PROJECT_TAG" \
            --output text >> $PROJECT_DIR/.circleci/ansible/inventory.txt
      - run:
          name: "Move inventory file into workspace"
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            mv $PROJECT_DIR/.circleci/ansible/inventory.txt $WORKSPACE_DIR/inventory.txt
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - "inventory.txt"
      # Rollback if fail
      - delete_stack:
          stack_name: Udapeople-Backend-${CUR_SHORT_HASH}
          when: "on_fail"

  create-frontend-infrastructure:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Set up AWS Credentials
      - aws-cli/setup
      # Create frontend server
      - deploy_stack:
          stack_name: Udapeople-Frontend-${CUR_SHORT_HASH}
          template_file: $TEMPLATE_ROOT_DIR/bucket.yml
          parameter_overrides: MyBucketName=udapeople-frontend-$CUR_SHORT_HASH
      - run:
          name: "Fetch and save the static host of the current bucket"
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            touch $WORKSPACE_DIR/websiteurl
            static_export_name=Udapeople-Frontend-$CUR_SHORT_HASH-WebsiteURL
            host=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`$static_export_name\`].Value" \
            --no-paginate --output text)
            # Remove prefix ending in "//"
            static_host=${host#*//}
            echo $static_host > $WORKSPACE_DIR/websiteurl
      - run:
          name: "Save the old bucket name if it exist"
          shell: /bin/bash
          command: |
            # no error if existing, make parent directories as needed
            mkdir --parents $WORKSPACE_DIR
            touch $WORKSPACE_DIR/existbucket
            bucket_info=$(aws s3 ls s3://udapeople-frontend-$PRE_SHORT_HASH 2>&1)
            if echo $bucket_info | grep 'NoSuchBucket'
            then
              echo "Old bucket doesn't exist"
              echo "" > $WORKSPACE_DIR/existbucket
            else
              old_bucket_uri=s3://udapeople-frontend-$PRE_SHORT_HASH
              echo "Old bucket uri: $old_bucket_uri"
              echo $old_bucket_uri > $WORKSPACE_DIR/existbucket
            fi
      - persist_to_workspace:
          root: /home/circleci/workspace
          paths: 
            - websiteurl
            - existbucket
      # Rollback if fail
      - delete_stack:
          stack_name: Udapeople-Frontend-${CUR_SHORT_HASH}
          when: "on_fail"

  configure-infrastructure: 
    executor: 
      name: python/default
      tag: "3.11.2"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      - add_ssh_keys:
          fingerprints: ["c2:84:20:b3:bc:15:1b:1c:2e:32:54:00:98:f8:7d:81"] 
      - python/install-packages:
          args: ansible
          pypi-cache: true
      - attach_workspace:
          at: /home/circleci/workspace
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i $WORKSPACE_DIR/inventory.txt $PROJECT_DIR/.circleci/ansible/configure-server.yml
      # Rollback if fail
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          when: "on_fail"
      - delete_stack:
          stack_name: Udapeople-Frontend-${CUR_SHORT_HASH}
          when: "on_fail"
      - delete_stack:
          stack_name: Udapeople-Backend-${CUR_SHORT_HASH}
          when: "on_fail"

  run-migrations:
    executor:
      name: node/default
      tag: "13.8.0"
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # - node/install-packages:
      #     app-dir: /home/circleci/project/build-cicd-pipeline/final-project/backend
      #     cache-path: /home/circleci/project/build-cicd-pipeline/final-project/backend
      #     cache-version: v2
      - run:
          name: Run migrations
          command: |
            # Your code here
            # Install dependencies
            npm install
            # Fix vulnerabilities
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # Run the scan
            npm audit --audit-level=critical
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            # Cat file
            cat migrations_dump.txt
          working_directory: /home/circleci/project/build-cicd-pipeline/final-project/backend
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here
            if cat migrations_dump.txt | grep "has been executed successfully."
            then
              # If you are using kvdb.io, generate the bucket ID "TwJ62Z4vHFHQJwWJPic4s7" in your local terminal first
              curl -d '1' https://kvdb.io/TwJ62Z4vHFHQJwWJPic4s7/migration_$CUR_SHORT_HASH
            fi
          working_directory: /home/circleci/project/build-cicd-pipeline/final-project/backend
      # Rollback if fail
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          when: "on_fail"
      - delete_stack:
          stack_name: Udapeople-Frontend-${CUR_SHORT_HASH}
          when: "on_fail"
      - delete_stack:
          stack_name: Udapeople-Backend-${CUR_SHORT_HASH}
          when: "on_fail"

  clean-up:
    executor: aws-cli/default
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      # Export environment variable
      - exports
      # Set up AWS Credentials
      - aws-cli/setup
      # Remove the backend infrastructure
      - delete_stack:
          stack_name: Udapeople-Backend-${PRE_SHORT_HASH}
      # Remove the frontend infrastructure
      - delete_stack:
          stack_name: Udapeople-Frontend-${PRE_SHORT_HASH}


workflows:
  final-project-workflows:
    jobs:
      - node/run:
          name: build-frontend
          app-dir: /home/circleci/project/build-cicd-pipeline/final-project/frontend
          npm-run: build
          version: "13.8.0"
      - node/test:
          name: test-frontend
          app-dir: /home/circleci/project/build-cicd-pipeline/final-project/frontend
          version: "13.8.0"
          requires:
            - "build-frontend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - node/run:
          name: build-backend
          app-dir: /home/circleci/project/build-cicd-pipeline/final-project/backend
          npm-run: build
          version: "13.8.0"
      - node/test:
          name: test-backend
          app-dir: /home/circleci/project/build-cicd-pipeline/final-project/backend
          version: "13.8.0"
          requires:
            - "build-backend"
      - scan-backend:
          requires:
            - "build-backend"
      - create-network-infrastructure:
          filters:
            branches:
              only:
                - master
                - "cicd-final-project"
      - create-frontend-infrastructure:
          filters:
            branches:
              only:
                - master
                - "cicd-final-project"
      - create-backend-infrastructure:
          requires:
            - "create-network-infrastructure"
          filters:
            branches:
              only:
                - master
                - "cicd-final-project"
      - configure-infrastructure:
          requires:
            - "create-backend-infrastructure"
          filters:
            branches:
              only:
                - master
                - "cicd-final-project"
      - run-migrations:
          requires:
            - "create-frontend-infrastructure"
            - "configure-infrastructure"
            - "scan-frontend"
            - "scan-backend"
          filters:
            branches:
              only:
                - master
                - "cicd-final-project"
      - clean-up:
          requires:
            - "run-migrations"
          filters:
            branches:
              only:
                - master
                - "cicd-final-project"
